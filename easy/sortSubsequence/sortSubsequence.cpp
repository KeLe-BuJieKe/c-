#include<iostream>
#include<vector>
using namespace std;

/*
问题描述:
牛牛定义排序子序列为一个数组中一段连续的子序列, 并且这段子序列是非递增或者非递减排序的。
牛牛有一个长度为n的整数数组A, 他现在有一个任务是把数组A分为若干段排序子序列, 牛牛想知道他最少可以把这个数
组分为几段排序子序列.
如样例所示, 牛牛可以把数组A划分为[1, 2, 3]和[2, 2, 1]两个排序子序列, 至少需要划分为2个排序子序列, 所以输出2
输入输出:
输入的第一行为一个正整数n(1 ≤ n ≤ 10 ^ 5)
第二行包括n个整数A_i(1 ≤ A_i ≤ 10 ^ 9), 表示数组A的每个数字。
输出描述：
输出:
一个整数表示牛牛可以将A最少划分为多少段排序子序列。
示例1:
输入:
6
1 2 3 2 2 1
输出:
2
*/


int main()
{
    int n;
    cin >> n;
    vector<int>arr(n, 0);

    for (auto& e : arr)
    {
        cin >> e;
    }
    int j = 0;
    int ret = 0;
    arr.resize(n + 1, 0);   //点睛之笔，这样就不会造成越界而崩溃了
    while (j<n)
    {
        if (arr[j] < arr[j+1])
        {
            while (j<n&&arr[j] <= arr[j+1])
            {
                ++j;
            }
            ++j;
            ++ret;
        }
        //一开始错在这相等情况，比如1 2 3 2 2 1，到了第4个数2，由于第5个数也是2，此时不确定它是要被划分到递增还是递减序列中
        //而我当时直接将其划分到递增区间内去了-----这里我得反思
        else if (arr[j] == arr[j + 1])  
        {
            ++j;
        }
        else 
        {
            while (j < n && arr[j] >= arr[j+1])
            {
                ++j;
            }
            ++j;
            ++ret;
        }
    }
    cout << ret;
    return 0;
}
