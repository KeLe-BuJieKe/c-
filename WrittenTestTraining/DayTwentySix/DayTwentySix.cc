/*
1.在单处理器系统中，如果同时存在有12个进程，则处于就绪队列中的进程数量最多为（ D ）
A 1
B 9
C 10
D 11

解析：这题表示的是再单处理器，也就是单个CPU的环境下，即使有再多的进程，都是并发的去运行的
也就是再同一时刻，只能有一个进程可以拥有CPU资源


2.在系统内存中设置磁盘缓冲区的主要目的是（ A ）。
A 减少磁盘 I/O 次数
B 减少平均寻道时间
C 提高磁盘数据可靠性
D 实现设备无关性


3.下列选项中，会导致进程从执行态变为就绪态的事件是（ D ）。
A 执行 P(wait)操作
B 申请内存失败
C 启动 I/O 设备
D 被高优先级进程抢占


4.下列关于管道（Pipe）通信的叙述中，正确的是 （ C ）
A 一个管道可实现双向数据传输
B 管道的容量仅受磁盘容量大小限制
C 进程对管道进行读操作和写操作都可以被阻塞
D 一个管道只能有一个读写进程或一个写进程对其操作


5.在一个文件被用户进程首次打开的过程中，操作系统需做的是 （ B ）
A 将文件内容读到内存中
B 将文件控制块读到内存中
C 修改文件控制块中的读写权限
D 将文件的数据缓冲区首指针返回给用户进程

解析：当打开一个文件时，操作系统会创建一个文件控制块，并返回一个文件描述符给程序员。
所以，首次打开一个文件的时候，是文件控制块被读入到内存当中


6.下列措施中，能加快虚实地址转换的是 （ C ）
1增大快表（TLB） 2让页表常驻内存 3增大交换区
A 仅1
B 仅2
C 仅1,2
D 仅2,3


7.一个进程的读磁区操作完成后，操作系统针对该进程必做的是 （ A ）
A 修改进程状态为就绪态
B 降低进程优先级
C .进程分配用户内存空间
D 增加进程的时间片大小


8.某系统正在执行三个进程 P1、 P2 和 P3， 各进程的计算（ CPU）时间和 I/O 时间比例如下表所示。
进程 计算时间 I/O时间
P1      90%     10%
P2      50%     50%
P3      15%     85%
为提高系统资源利用率，合理的进程优先级设置应为（ B ）。
A P1>P2>P3
B P3>P2>P1
C P2>P1=P3
D P1>P2=P3


9.设系统缓冲区和用户工作区均采用单缓冲，从外设读入1 个数据块到系统缓冲区的时间为 100，
从系统缓冲区读入 1 个数据块到用户工作区的时间为 5，对用户工作区中的 1 个数据块进行分析的时间为 90（如下图所示）。
进程从外设读入并分析 2 个数据块的最短时间是（ C  ）。
A 200
B 295
C 300
D 390


10.若某文件系统索引结点（inode）中有直接地址项和间接地址项， 则下列选项中， 与单个文件长度无关的因素是（ A）。
A 索引结点的总数
B 间接地址索引的级数
C 地址项的个数
D 文件块大小


11.标题：跳台阶扩展问题 | 时间限制：1秒 | 内存限制：65536K | 语言限制： [Kotlin, Typescript, Python, C++, Groovy, Rust, C#, Java, Go, Scala, Javascript,
Ruby, Swift, Php, Python 3]
【跳台阶扩展问题】
一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶(n为正整数)总共有多少种跳法。
数据范围：1 <= n <= 20
进阶：空间复杂度O(1) 空间复杂度O(1)



class Solution
{
public:
    int jumpFloorII(int number)
    {
        // 1
        // 2
        // 4
        // 8
        //f(number)=f(number-1)+f(number-2)+...+f(number-number)
        //故可以得到f(n)=f(0)+f(1)+...+f(n-2)+f(n-1)
        // f(n-1)=f(0)+...+f(n-2)
        // 进而得到f(n)=2*f(n-1)
        if (number == 1)
        {
            return 1;
        }
        else
        {
            return pow(2,number - 1);
        }
    }
};



12.标题：快到碗里来 | 时间限制：1秒 | 内存限制：32768K | 语言限制： 不限
【快到碗里来】小喵们很喜欢把自己装进容器里的（例如碗），但是要是碗的周长比喵的身长还短，它们就进不去了。
现在告诉你它们的身长，和碗的半径，请判断一下能否到碗里去。
输入描述：
输入有多组数据。
每组数据包含两个整数n (1≤n≤2^128) 和r (1≤r≤2^128)，分别代表喵的身长和碗的半径。
圆周率使用3.14。
输出描述：
对应每一组数据，如果喵能装进碗里就输出“Yes”；否则输出“No”。
示例1：
输入
6 1\n7 1\n9876543210 1234567890
输出
Yes\nNo\nNo


#include <iostream>

int main()
{
    double n,r;
    while (std::cin >> n>> r)
    {
        if(n > 2*r*3.1415)
        {
            std::cout << "No" << std::endl;
        }
        else
        {
            std::cout << "Yes" << std::endl;
            
        }
    }
    return 0;
}
*/


