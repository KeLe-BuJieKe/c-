/*
390. 消除游戏
列表 arr 由在范围 [1, n] 中的所有整数组成，并按严格递增排序。请你对 arr 应用下述算法：
从左到右，删除第一个数字，然后每隔一个数字删除一个，直到到达列表末尾。
重复上面的步骤，但这次是从右到左。也就是，删除最右侧的数字，然后剩下的数字每隔一个删除一个。
不断重复这两步，从左到右和从右到左交替进行，直到只剩下一个数字。
给你整数 n ，返回 arr 最后剩下的数字。
示例 1：
输入：n = 9
输出：6
解释：
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
arr = [2, 4, 6, 8]
arr = [2, 6]
arr = [6]

示例 2：
输入：n = 1
输出：1
提示：
1 <= n <= 10^9
*/


class Solution 
{
public:
    int lastRemaining(int n) 
    {
        int a0 = 1; //首项
        int d = 1; //公差
        int num = n; //当前数组元素个数
        bool left_to_right = true;  //判断是从哪个方向删除
        while (num != 1)
        {
            if (num & 1) //如果是奇数，不管是从那个方向删除，首项都会改变
            {
                a0 = a0 + d;
            }
            else
            {
                if (left_to_right == true) //如果是偶数，且是从左项由删除，首项会改变
                {
                    a0 = a0 + d;
                }
                else //偶数且是从右向左删除，首项不会改变
                {
                    a0 = a0;
                }
            }
            left_to_right = !left_to_right; //每一轮删除的方向
            num /= 2; //删除后的个数
            d *= 2; // 公差变大
        }
        return a0;
    }
};
